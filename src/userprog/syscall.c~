#include "userprog/syscall.h"
#include <stdio.h>
#include <devices/input.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "userprog/process.h"
#include "devices/shutdown.h"
#include "threads/thread.h"
#include "filesys/filesys.h"
static void syscall_handler (struct intr_frame *);
bool create(const char*,unsigned);

int
open (const char* file_name)
{
	struct thread* current_thread = thread_current();
	struct file* file = filesys_open(file_name);
	if(file == NULL){
		//printf("load failed : %s\n",file_name);
		return -1;
	}
	return process_add_file(file);
}
int
filesize(unsigned int fd)
{
	struct thread* current_thread = thread_current();
	if ( current_thread->file_table_size <= fd) return -1;
	else if ( current_thread->file_table[fd] == NULL ) return -1;
	return file_length(current_thread->file_table[fd]);
}
struct lock file_lock;
unsigned char lock_initialized = 0;
int
read (unsigned int fd, void* buffer,unsigned int size)
{
	unsigned int bytes_of_read;
	unsigned int current;
	struct file* file;
	if(lock_initialized == 0)
	{
		lock_init(&file_lock);
		lock_initialized = 1;
	}
	lock_acquire(&file_lock);
	if(fd == 0)
	{
		char* char_of_buffer = (char*)buffer;
		for(current = 0;current < size;current++) *(char_of_buffer++) = input_getc();
		lock_release(&file_lock);
		return current;
	}
	file = process_get_file(fd);
	if(file == NULL) {
		lock_release(&file_lock);
		return -1;
	}
	bytes_of_read = file_read(file,buffer,size);
	lock_release(&file_lock);
	return bytes_of_read;
}
int
write(unsigned int fd,void* buffer,unsigned int size)
{
	unsigned int bytes_of_write;
	struct file* file;
	if( lock_initialized == 0)
	{
		lock_init(&file_lock);
		lock_initialized = 1;
	}
	lock_acquire(&file_lock);
	if(fd == 1){
		putbuf((const char*)buffer,size);
		lock_release(&file_lock);
		return size;
	}
	file = process_get_file(fd);
	if(file == NULL) {
		lock_release(&file_lock);
		return -1;
	}
	bytes_of_write = file_write(file,buffer,size);
	lock_release(&file_lock);
	return bytes_of_write;
}

void
seek (unsigned int fd,unsigned position)
{
	struct file* file;
	file = process_get_file(fd);
	if(file == NULL) return ;
	file_seek(file,position);
}

unsigned
tell (unsigned int fd)
{
	struct file* file;
	file = process_get_file(fd);
	if(file == NULL) return -1;
	return file_tell(file);
}
void
close(unsigned int fd)
{
	process_close_file(fd);
}

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}
void
check_address(void* addr)
{
	//printf("%p\n",addr);
	if( addr < 0x08048000 || addr >= 0xc0000000 ) {
		//printf("check_Address\n");
		exit(-1);
	}
}
void
get_argument(void *esp,int *arg,int count)
{
	int current;
	for(current = 0; current < count; current ++ )
	{
		if( esp < 0x8048000 || esp >= 0xc0000000)
		{
			exit(-1);
			return;
		}
		arg[current] = *(int*)(esp);
		esp += sizeof(int);
	}
}
tid_t
exec(const char* cmd_line)
{
	int tid =  process_execute(cmd_line);
	struct thread* child_process = get_child_process(tid);
	if( child_process == NULL ) return -1;
	sema_down(&child_process->load_semaphore);
	if( child_process->load_failed ) return -1;
	return tid;
}
void halt()
{
	shutdown_power_off();
}
int wait(tid_t tid)
{
	return process_wait(tid);
}
void exit(int status)
{
	printf("%s: exit(%d)\n",thread_current()->name,status);
	thread_current()->exit_status = status;
	thread_exit();
}
bool create(const char* file,unsigned initial_size)
{
	//printf("create : %s / %d\n",file,initial_size);
	return filesys_create(file,initial_size);
}
bool remove(const char * file)
{
	return filesys_remove(file);
}
static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  int args[3];
  int number;
  void* esp = f->esp;
  check_address(esp);
  //printf("esp : %x\n",esp);
  get_argument(esp,&number,1);
 // printf("%d system called!\n",number);
  esp += sizeof(int);
  switch(number)
  {
	case SYS_HALT:
		halt();
	break;
	case SYS_EXIT:
		get_argument(esp,args,1);
		exit(args[0]);
	break;
	case SYS_CREATE:
		get_argument(esp,args,2);
		check_address((void*)args[0]);
		f->eax = (int)create((char*)args[0],args[1]);
	break;
	case SYS_WAIT:
		get_argument(esp,args,1);
		f->eax = wait(args[0]);
	break;	
	case SYS_EXEC:
		get_argument(esp,args,1);
		check_address((void*)args[0]);
		f->eax = (int)exec((char*)args[0]);
	break;
	case SYS_OPEN:
		get_argument(esp,args,1);
		check_address((void*)args[0]);
		f->eax = open((char*)args[0]);
	break;
	case SYS_SEEK:
		get_argument(esp,args,2);
		seek(args[0],args[1]);
	break;
	case SYS_TELL:
		get_argument(esp,args,1);
		f->eax = tell(args[0]);
	break;
	case SYS_CLOSE:
		get_argument(esp,args,1);
		close(args[0]);
	break;
	case SYS_FILESIZE:
		get_argument(esp,args,1);
		f->eax = filesize(args[0]);
	break;
	case SYS_REMOVE:
		get_argument(esp,args,1);
		check_address((void*)args[0]);
		f->eax = (int)remove((char*)args[0]);
	break;
	case SYS_WRITE:
		get_argument(esp,args,3);
		check_address((void*)args[1]);
		f->eax = write(args[0],(void*)args[1],args[2]);
	break;
	case SYS_READ:
		get_argument(esp,args,3);
		check_address((void*)args[1]);
		f->eax = read(args[0],(void*)args[1],args[2]);
	break;
	
  }
  //thread_exit ();
}
